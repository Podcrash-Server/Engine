/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.PermissionsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Permissions extends TableImpl<PermissionsRecord> {

    private static final long serialVersionUID = 617947406;

    /**
     * The reference instance of <code>public.permissions</code>
     */
    public static final Permissions PERMISSIONS = new Permissions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PermissionsRecord> getRecordType() {
        return PermissionsRecord.class;
    }

    /**
     * The column <code>public.permissions.player_id</code>.
     */
    public final TableField<PermissionsRecord, Long> PLAYER_ID = createField("player_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.permissions.permission_id</code>.
     */
    public final TableField<PermissionsRecord, Integer> PERMISSION_ID = createField("permission_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.permissions</code> table reference
     */
    public Permissions() {
        this(DSL.name("permissions"), null);
    }

    /**
     * Create an aliased <code>public.permissions</code> table reference
     */
    public Permissions(String alias) {
        this(DSL.name(alias), PERMISSIONS);
    }

    /**
     * Create an aliased <code>public.permissions</code> table reference
     */
    public Permissions(Name alias) {
        this(alias, PERMISSIONS);
    }

    private Permissions(Name alias, Table<PermissionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Permissions(Name alias, Table<PermissionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Permissions(Table<O> child, ForeignKey<O, PermissionsRecord> key) {
        super(child, key, PERMISSIONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PERMISSIONS_PLAYER_ID_INDEX, Indexes.PERMISSIONS_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PermissionsRecord>> getKeys() {
        return Arrays.<UniqueKey<PermissionsRecord>>asList(Keys.PERMISSIONS_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PermissionsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PermissionsRecord, ?>>asList(Keys.PERMISSIONS__PERMISSIONS_FOREIGN_PLAYER_ID);
    }

    public Players players() {
        return new Players(this, Keys.PERMISSIONS__PERMISSIONS_FOREIGN_PLAYER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Permissions as(String alias) {
        return new Permissions(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Permissions as(Name alias) {
        return new Permissions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Permissions rename(String name) {
        return new Permissions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Permissions rename(Name name) {
        return new Permissions(name, null);
    }
}
