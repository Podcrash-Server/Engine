/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.DescriptionsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Descriptions extends TableImpl<DescriptionsRecord> {

    private static final long serialVersionUID = 1398115082;

    /**
     * The reference instance of <code>public.descriptions</code>
     */
    public static final Descriptions DESCRIPTIONS = new Descriptions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DescriptionsRecord> getRecordType() {
        return DescriptionsRecord.class;
    }

    /**
     * The column <code>public.descriptions.id</code>.
     */
    public final TableField<DescriptionsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("(nextval('\"DESCRIPTIONS_id_sequence\"'::regclass))::integer", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.descriptions.key</code>.
     */
    public final TableField<DescriptionsRecord, String> KEY = createField("key", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>public.descriptions.value</code>.
     */
    public final TableField<DescriptionsRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.VARCHAR(1024), this, "");

    /**
     * Create a <code>public.descriptions</code> table reference
     */
    public Descriptions() {
        this(DSL.name("descriptions"), null);
    }

    /**
     * Create an aliased <code>public.descriptions</code> table reference
     */
    public Descriptions(String alias) {
        this(DSL.name(alias), DESCRIPTIONS);
    }

    /**
     * Create an aliased <code>public.descriptions</code> table reference
     */
    public Descriptions(Name alias) {
        this(alias, DESCRIPTIONS);
    }

    private Descriptions(Name alias, Table<DescriptionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Descriptions(Name alias, Table<DescriptionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Descriptions(Table<O> child, ForeignKey<O, DescriptionsRecord> key) {
        super(child, key, DESCRIPTIONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DESCRIPTIONS__PRIMARY_ID, Indexes.DESCRIPTIONS__UNIQUE_KEY, Indexes.DESCRIPTIONS_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DescriptionsRecord> getPrimaryKey() {
        return Keys.DESCRIPTIONS__PRIMARY_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DescriptionsRecord>> getKeys() {
        return Arrays.<UniqueKey<DescriptionsRecord>>asList(Keys.DESCRIPTIONS__PRIMARY_ID, Keys.DESCRIPTIONS__UNIQUE_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Descriptions as(String alias) {
        return new Descriptions(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Descriptions as(Name alias) {
        return new Descriptions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Descriptions rename(String name) {
        return new Descriptions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Descriptions rename(Name name) {
        return new Descriptions(name, null);
    }
}
