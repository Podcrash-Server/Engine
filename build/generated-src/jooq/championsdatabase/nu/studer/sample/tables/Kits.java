/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import nu.studer.sample.Indexes;
import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.KitsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Kits extends TableImpl<KitsRecord> {

    private static final long serialVersionUID = 2146313718;

    /**
     * The reference instance of <code>public.kits</code>
     */
    public static final Kits KITS = new Kits();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KitsRecord> getRecordType() {
        return KitsRecord.class;
    }

    /**
     * The column <code>public.kits.player_id</code>.
     */
    public final TableField<KitsRecord, Long> PLAYER_ID = createField("player_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.kits.class</code>.
     */
    public final TableField<KitsRecord, String> CLASS = createField("class", org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>public.kits.build_id</code>.
     */
    public final TableField<KitsRecord, Integer> BUILD_ID = createField("build_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.kits.build_info</code>.
     */
    public final TableField<KitsRecord, String> BUILD_INFO = createField("build_info", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * Create a <code>public.kits</code> table reference
     */
    public Kits() {
        this(DSL.name("kits"), null);
    }

    /**
     * Create an aliased <code>public.kits</code> table reference
     */
    public Kits(String alias) {
        this(DSL.name(alias), KITS);
    }

    /**
     * Create an aliased <code>public.kits</code> table reference
     */
    public Kits(Name alias) {
        this(alias, KITS);
    }

    private Kits(Name alias, Table<KitsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Kits(Name alias, Table<KitsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Kits(Table<O> child, ForeignKey<O, KitsRecord> key) {
        super(child, key, KITS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.KITS_PLAYER_ID_INDEX, Indexes.KITS_PLAYER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<KitsRecord> getPrimaryKey() {
        return Keys.KITS_PLAYER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<KitsRecord>> getKeys() {
        return Arrays.<UniqueKey<KitsRecord>>asList(Keys.KITS_PLAYER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<KitsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<KitsRecord, ?>>asList(Keys.KITS__KITS_FOREIGN_PLAYER_ID);
    }

    public Players players() {
        return new Players(this, Keys.KITS__KITS_FOREIGN_PLAYER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Kits as(String alias) {
        return new Kits(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Kits as(Name alias) {
        return new Kits(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Kits rename(String name) {
        return new Kits(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Kits rename(Name name) {
        return new Kits(name, null);
    }
}
