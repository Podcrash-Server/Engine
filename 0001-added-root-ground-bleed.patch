From 966ab39416c79f9a0ebc9704cce404018a496a9c Mon Sep 17 00:00:00 2001
From: rain474 <3-lordraindance@users.noreply.ccl.pdcl.club>
Date: Thu, 28 Nov 2019 19:51:39 -0500
Subject: [PATCH] added root, ground, bleed

---
 .../podcrash/api/mc/effect/status/Status.java |  6 +-
 .../api/mc/effect/status/StatusApplier.java   | 84 +++++++++++++++----
 .../mc/effect/status/custom/BleedStatus.java  | 25 ++++++
 .../{NoJumpStatus.java => GroundStatus.java}  | 10 +--
 .../api/mc/listeners/StatusListener.java      | 43 ++++++++++
 .../podcrash/api/plugin/PodcrashSpigot.java   |  6 +-
 6 files changed, 146 insertions(+), 28 deletions(-)
 create mode 100644 src/main/java/com/podcrash/api/mc/effect/status/custom/BleedStatus.java
 rename src/main/java/com/podcrash/api/mc/effect/status/custom/{NoJumpStatus.java => GroundStatus.java} (82%)
 create mode 100644 src/main/java/com/podcrash/api/mc/listeners/StatusListener.java

diff --git a/src/main/java/com/podcrash/api/mc/effect/status/Status.java b/src/main/java/com/podcrash/api/mc/effect/status/Status.java
index 62b8aa3..9927994 100644
--- a/src/main/java/com/podcrash/api/mc/effect/status/Status.java
+++ b/src/main/java/com/podcrash/api/mc/effect/status/Status.java
@@ -18,6 +18,7 @@ public enum Status {
     WEAKNESS("Weakness", PotionEffectType.WEAKNESS, true, true, 5),
     RESISTANCE("Resistance", PotionEffectType.DAMAGE_RESISTANCE, true, false, 11),
     REGENERATION("Regeneration", PotionEffectType.REGENERATION, true, false, 10),
+    ABSORPTION("Absorption", PotionEffectType.ABSORPTION, true, false, 22),
 
     FIRE("FIRE", null, false, true, 100),
     CLOAK("Cloak", null, false, false, 101),
@@ -25,8 +26,9 @@ public enum Status {
     SHOCK("Shock", null, false, true, 103),
     MARKED("Marked", null, false, true, 104),
     ROOTED("Rooted", null, false, true, 105),
-    NOJUMP("Crippled", null, false, true, 108),
-    INEPTITUDE("Ineptitude", null, false, false, 107);
+    INEPTITUDE("Ineptitude", null, false, false, 107),
+    GROUND("Crippled", null, false, true, 108),
+    BLEED("Bleed", null, false, true, 109);
 
     private String name;
     private PotionEffectType potionEffectType;
diff --git a/src/main/java/com/podcrash/api/mc/effect/status/StatusApplier.java b/src/main/java/com/podcrash/api/mc/effect/status/StatusApplier.java
index fbae73d..050b71a 100644
--- a/src/main/java/com/podcrash/api/mc/effect/status/StatusApplier.java
+++ b/src/main/java/com/podcrash/api/mc/effect/status/StatusApplier.java
@@ -11,11 +11,12 @@ import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
 import org.bukkit.scheduler.BukkitRunnable;
 
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
+import java.util.function.Consumer;
 
+/**
+ * To make this class better, there has to be less structure here
+ */
 public class StatusApplier {
     private Player player;
     private static Map<String, StatusApplier> appliers = new HashMap<>();
@@ -24,8 +25,9 @@ public class StatusApplier {
     private static HashMap<String, Long> silenceMap = new HashMap<>();
     private static HashMap<String, Long> shockMap = new HashMap<>();
     private static HashMap<String, Long> rootMap = new HashMap<>();
-    private static HashMap<String, Long> noJumpMap = new HashMap<>();
+    private static HashMap<String, Long> groundMap = new HashMap<>();
     private static HashMap<String, Long> ineptMap = new HashMap<>();
+    private static HashMap<String, Long> bleedMap = new HashMap<>();
 
     private StatusApplier(Player p) {
         this.player = p;
@@ -196,6 +198,12 @@ public class StatusApplier {
             case INEPTITUDE:
                 removeInept();
                 break;
+            case GROUND:
+                removeGround();
+                break;
+            case BLEED:
+                removeBleed();
+                break;
         }
     }
 
@@ -223,12 +231,15 @@ public class StatusApplier {
             case ROOTED:
                 applyRoot(duration);
                 break;
-            case NOJUMP:
-                applyNoJump(duration);
+            case GROUND:
+                applyGround(duration);
                 break;
             case INEPTITUDE:
                 applyInept(duration);
                 break;
+            case BLEED:
+                applyBleed(duration);
+                break;
         }
     }
 
@@ -274,17 +285,22 @@ public class StatusApplier {
         TimeHandler.repeatedTime(1, 1, new RootedStatus(player));
     }
 
-    private void applyNoJump(int duration) {
-        if (isNoJump()) removeNoJump();
-        noJumpMap.put(player.getName(), System.currentTimeMillis() + duration);
-        TimeHandler.repeatedTime(1, 1, new NoJumpStatus(player));
+    private void applyGround(int duration) {
+        if (isGrounded()) removeGround();
+        groundMap.put(player.getName(), System.currentTimeMillis() + duration);
+        TimeHandler.repeatedTime(1, 1, new GroundStatus(player));
     }
 
     private void applyInept(int duration) {
         if (isInept()) removeInept();
         ineptMap.put(player.getName(), System.currentTimeMillis() + duration);
         TimeHandler.repeatedTime(1, 1, new IneptStatus(player));
+    }
 
+    private void applyBleed(int duration) {
+        if(isBleeding()) removeBleed();
+        bleedMap.put(player.getName(), System.currentTimeMillis() + duration);
+        TimeHandler.repeatedTime(1, 1, new BleedStatus(player));
     }
 
     public boolean isCloaked() {
@@ -307,14 +323,18 @@ public class StatusApplier {
         return rootMap.containsKey(this.player.getName());
     }
 
-    public boolean isNoJump() {
-        return noJumpMap.containsKey(player.getName());
+    public boolean isGrounded() {
+        return groundMap.containsKey(player.getName());
     }
 
     public boolean isInept() {
         return ineptMap.containsKey(player.getName());
     }
 
+    public boolean isBleeding() {
+        return bleedMap.containsKey(player.getName());
+    }
+
     public void removeCloak() {
         if (isCloaked()) {
             cloakMap.remove(this.player.getName());
@@ -354,14 +374,17 @@ public class StatusApplier {
         }
     }
 
-    public void removeNoJump() {
-        if (isNoJump()) noJumpMap.remove(player.getName());
+    public void removeGround() {
+        if (isGrounded()) groundMap.remove(player.getName());
     }
 
     public void removeInept() {
         if (isInept()) ineptMap.remove(player.getName());
     }
 
+    public void removeBleed() {
+        if (isBleeding()) bleedMap.remove(player.getName());
+    }
     /**
      * @param status the status in question
      * @return the duration of a custom effect
@@ -384,11 +407,15 @@ public class StatusApplier {
             case ROOTED:
                 if (isRooted()) map = rootMap;
                 break;
-            case NOJUMP:
-                if (isNoJump()) map = noJumpMap;
+            case GROUND:
+                if (isGrounded()) map = groundMap;
+                break;
             case INEPTITUDE:
                 if (isInept()) map = ineptMap;
                 break;
+            case BLEED:
+                if(isBleeding()) map = bleedMap;
+                break;
         }
         return (map != null) ? map.get(player.getName()) - System.currentTimeMillis() : 0;
     }
@@ -412,10 +439,33 @@ public class StatusApplier {
         if (isSilenced()) statuses.add(Status.SILENCE);
         if (isRooted()) statuses.add(Status.ROOTED);
         if (isInept()) statuses.add(Status.INEPTITUDE);
+        if (isGrounded()) statuses.add(Status.GROUND);
+        if (isBleeding()) statuses.add(Status.BLEED);
         return statuses;
     }
 
+    /**
+     * TODO: Rewrite the class so this is possible
+     * @param statusConsumer
+     */
+    public void getEffectGenerator(Consumer<Status> statusConsumer) {
+
+    }
+
     public boolean has(Status status) {
         return getEffects().contains(status);
     }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        StatusApplier that = (StatusApplier) o;
+        return player.getName().equals(that.player.getName());
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(player.getName());
+    }
 }
diff --git a/src/main/java/com/podcrash/api/mc/effect/status/custom/BleedStatus.java b/src/main/java/com/podcrash/api/mc/effect/status/custom/BleedStatus.java
new file mode 100644
index 0000000..4d91636
--- /dev/null
+++ b/src/main/java/com/podcrash/api/mc/effect/status/custom/BleedStatus.java
@@ -0,0 +1,25 @@
+package com.podcrash.api.mc.effect.status.custom;
+
+import com.podcrash.api.mc.effect.status.Status;
+import org.bukkit.entity.Player;
+
+public class BleedStatus extends CustomStatus {
+    public BleedStatus(Player player) {
+        super(player, Status.BLEED);
+    }
+
+    @Override
+    protected void doWhileAffected() {
+
+    }
+
+    @Override
+    protected boolean isInflicted() {
+        return getApplier().has(Status.BLEED);
+    }
+
+    @Override
+    protected void removeEffect() {
+        getApplier().removeStatus(Status.BLEED);
+    }
+}
diff --git a/src/main/java/com/podcrash/api/mc/effect/status/custom/NoJumpStatus.java b/src/main/java/com/podcrash/api/mc/effect/status/custom/GroundStatus.java
similarity index 82%
rename from src/main/java/com/podcrash/api/mc/effect/status/custom/NoJumpStatus.java
rename to src/main/java/com/podcrash/api/mc/effect/status/custom/GroundStatus.java
index 2352406..2cc0e3c 100644
--- a/src/main/java/com/podcrash/api/mc/effect/status/custom/NoJumpStatus.java
+++ b/src/main/java/com/podcrash/api/mc/effect/status/custom/GroundStatus.java
@@ -6,10 +6,10 @@ import org.bukkit.entity.Player;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
 
-public class NoJumpStatus extends CustomStatus {
+public class GroundStatus extends CustomStatus {
     private final PotionEffect jump = new PotionEffect(PotionEffectType.JUMP, 5, 128, true);
-    public NoJumpStatus(Player player) {
-        super(player, Status.NOJUMP);
+    public GroundStatus(Player player) {
+        super(player, Status.GROUND);
 
     }
 
@@ -35,11 +35,11 @@ public class NoJumpStatus extends CustomStatus {
 
     @Override
     protected boolean isInflicted() {
-        return getApplier().isNoJump();
+        return getApplier().isGrounded();
     }
 
     @Override
     protected void removeEffect() {
-        getApplier().removeNoJump();
+        getApplier().removeGround();
     }
 }
diff --git a/src/main/java/com/podcrash/api/mc/listeners/StatusListener.java b/src/main/java/com/podcrash/api/mc/listeners/StatusListener.java
new file mode 100644
index 0000000..aba3f42
--- /dev/null
+++ b/src/main/java/com/podcrash/api/mc/listeners/StatusListener.java
@@ -0,0 +1,43 @@
+package com.podcrash.api.mc.listeners;
+
+import com.podcrash.api.mc.effect.status.Status;
+import com.podcrash.api.mc.effect.status.StatusApplier;
+import com.podcrash.api.mc.events.DamageApplyEvent;
+import org.bukkit.entity.Player;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.EventPriority;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+import org.bukkit.event.player.PlayerToggleSprintEvent;
+import org.bukkit.plugin.java.JavaPlugin;
+
+public class StatusListener extends ListenerBase {
+    public StatusListener(JavaPlugin plugin) {
+        super(plugin);
+    }
+
+    @EventHandler(priority = EventPriority.LOWEST)
+    public void sprint(PlayerToggleSprintEvent event) {
+        if(event.isSprinting() &&
+                StatusApplier.getOrNew(event.getPlayer()).has(Status.GROUND)) event.setCancelled(true);
+    }
+
+    @EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)
+    public void damage(DamageApplyEvent event) {
+        if(!(event.getVictim() instanceof Player)) return;
+        StatusApplier applier = StatusApplier.getOrNew((Player) event.getVictim());
+        if(applier.has(Status.ROOTED))
+            event.setDoKnockback(false);
+    }
+
+    /**
+     * This might not work for fortitude
+     * @param e
+     */
+    @EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)
+    public void heal(EntityRegainHealthEvent e) {
+        if(!(e.getEntity() instanceof Player)) return;
+        Player player = (Player) e.getEntity();
+        //if(e.getRegainReason())
+        if(StatusApplier.getOrNew(player).has(Status.BLEED)) e.setCancelled(true);
+    }
+}
diff --git a/src/main/java/com/podcrash/api/plugin/PodcrashSpigot.java b/src/main/java/com/podcrash/api/plugin/PodcrashSpigot.java
index 2d1e317..3b6cf3a 100644
--- a/src/main/java/com/podcrash/api/plugin/PodcrashSpigot.java
+++ b/src/main/java/com/podcrash/api/plugin/PodcrashSpigot.java
@@ -2,10 +2,7 @@ package com.podcrash.api.plugin;
 
 import com.podcrash.api.commands.WorldCommand;
 import com.podcrash.api.mc.damage.DamageQueue;
-import com.podcrash.api.mc.listeners.GameDamagerConverterListener;
-import com.podcrash.api.mc.listeners.GameListener;
-import com.podcrash.api.mc.listeners.MapMaintainListener;
-import com.podcrash.api.mc.listeners.SpigotJoinListener;
+import com.podcrash.api.mc.listeners.*;
 import com.podcrash.api.mc.tracker.CoordinateTracker;
 import com.podcrash.api.mc.tracker.Tracker;
 import com.podcrash.api.mc.tracker.VectorTracker;
@@ -143,6 +140,7 @@ public class PodcrashSpigot extends JavaPlugin implements PodcrashPlugin {
             new GameDamagerConverterListener(this);
             new MapMaintainListener(this);
             new SpigotJoinListener(this);
+            new StatusListener(this);
         });
     }
     private void registerCommands() {
-- 
2.20.1 (Apple Git-117)

